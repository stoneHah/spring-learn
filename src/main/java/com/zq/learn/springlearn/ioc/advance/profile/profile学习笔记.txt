profile 可以理解成一种策略

在开发过程中生产环境和开发环境的数据库是不一样的，当在这两者之间数据配置进行切换时，最愚蠢的办法就是用到哪个就把其他的配置给注释掉
而现在spring提供了一种便捷的方式来解决上诉愚蠢的方式

我们可以再类或方法上指定@Profile来指定哪一种策略
@Bean
@Profile("dev")
public DataSource embeddedDataSource(){
	return new DataSource("embedded datasource");
}

指定了不同策略后，下面要做的就是激活某种策略
spring.profiles.active和spring.profiles.default。 如
果设置了spring.profiles.active属性的话， 那么它的值就会用来确定哪个profile是激活的。 但如果没有设
置spring.profiles.active属性的话， 那Spring将会查找spring.profiles.default的值。 如
果spring.profiles.active和spring.profiles.default均没有设置的话， 那就没有激活的profile， 因此只会创建那些没有定义在
profile中的bean

1、作为DispatcherServlet的初始化参数；
	<selvet>
		...
		<init-param>
			<param-name>spring.profiles.default</param-name>
			<param-value>dev</param-value>
		</init-param>
	</selvet>
2、作为Web应用的上下文参数；
	<web-app>
		...
		<context-param>
			<param-name>spring.profiles.default</param-name>
			<param-value>dev</param-value>
		</context-param>
	</web-app>
3、作为JNDI条目；
4、作为环境变量；
5、作为JVM的系统属性；
	-Dspring.profiles.active=prod
6、在集成测试类上， 使用@ActiveProfiles注解设置。
	@RunWith(SpringJUnit4ClassRunner.class)
	@ContextConfiguration(classes={DataSourceConfig.class})
	@ActiveProfiles("dev")
	public class DataSourceConfigTest

这几种方式的最终结果都是往ApplicationContext的Environment设置activeProfiles
不得不说Environment真是个神奇，强大的东西